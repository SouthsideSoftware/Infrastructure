<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NameSelectorCannotFindComponent" xml:space="preserve">
    <value>Cannot find component with name {0} of type {1}</value>
  </data>
  <data name="ParameterCheck_GetParameterRequiredErrorMessage" xml:space="preserve">
    <value>The parameter {0} is required.</value>
  </data>
  <data name="ParameterCheck_IntParameterIsNonZero" xml:space="preserve">
    <value>The parameter {0} must not have a zero value</value>
  </data>
  <data name="ParameterCheck_ListMustContainAtLeastOne" xml:space="preserve">
    <value>Enumerable {0} must contain at least one member</value>
  </data>
  <data name="ParameterCheck_StringRequiredAndNotWhitespace" xml:space="preserve">
    <value>The string parameter {0} must not be null, empty or contain only whitespace</value>
  </data>
  <data name="DirectoryAndFileHelper_ErrorCreatingDirectory" xml:space="preserve">
    <value>Error Creating Directory: '{0}'</value>
  </data>
  <data name="Mime_GetMimeEncoding_UnrecognizedMimeEncoding" xml:space="preserve">
    <value>Unrecognized MimeEncoding: {0}</value>
  </data>
  <data name="Mime_GetMimeCharset_UnrecognizedCharset" xml:space="preserve">
    <value>Unrecognized charset: {0}</value>
  </data>
  <data name="Mime_GetMimeStream_CouldNotDeleteTempFileUsedToCreateBody" xml:space="preserve">
    <value>Could not delete temp file {0} used to create mime body</value>
  </data>
  <data name="Mime_GetMimeCollectionFile_ErrorDuringEncoding" xml:space="preserve">
    <value>Error occurred during mime encoding</value>
  </data>
  <data name="Mime_Dispose_CouldNoDeleteMimeBufferFile" xml:space="preserve">
    <value>Could not delete mime buffer file {0}</value>
  </data>
  <data name="MimeBodyPart_GetMimeEncoding_UnrecognizedMimeEncoding" xml:space="preserve">
    <value>Unrecognized MimeEncoding: </value>
  </data>
  <data name="MimeBodyPart_GetMimeCharsetUnrecognizedCharset" xml:space="preserve">
    <value>Unrecognized charset: </value>
  </data>
  <data name="MimeHeader_ParseLine_HeaderIsNotInCorrectForm" xml:space="preserve">
    <value>Header is not in the expected name:value form.  The raw data is {0}</value>
  </data>
  <data name="MimeHeaderParamCollection_Add_HeaderParamWithNameExists" xml:space="preserve">
    <value>Header param with same name already exists.  The header is {0}</value>
  </data>
  <data name="MimeHeaderParamCollection_AddAt_InvalidPositionForMiimeHeader" xml:space="preserve">
    <value>Invalid position {0} to add a parameter in a Mime Header</value>
  </data>
  <data name="MimeMessage_ContentTypeUnknownBecauseNoBody" xml:space="preserve">
    <value>Content type is unknown because message has no body</value>
  </data>
  <data name="MimeMessage_Write_MimeMustHaveBody" xml:space="preserve">
    <value>Mime message must have a body part</value>
  </data>
  <data name="MimeParser_ValidateVersionHeader_InvalidMimeStream" xml:space="preserve">
    <value>Invalid MIME stream</value>
  </data>
  <data name="MimeParser_ParseBoundary_InvalidBoundaryString" xml:space="preserve">
    <value>Invalid boundary string</value>
  </data>
  <data name="MimeParser_ParseBoundary_InvalidMultipart" xml:space="preserve">
    <value>Invalid multipart</value>
  </data>
  <data name="LogInitializer_HookUnhandledExceptionEvents_UnhandledException" xml:space="preserve">
    <value>Unhandled exception</value>
  </data>
  <data name="LogInitializer_HookUnhandledExceptionEvents_Unhandled_UnknownException" xml:space="preserve">
    <value>Unhandled exception.  Actual exception is not known</value>
  </data>
  <data name="ParameterCheck_IntParameterGreaterThanZero" xml:space="preserve">
    <value>Parameter {0} must be greater than zero.</value>
  </data>
  <data name="DirectoryAndFileHelper_SaveStreamToFile_CouldNotDeleteExistingFile" xml:space="preserve">
    <value>The destination file already exists and could not be deleted '{0}'</value>
  </data>
  <data name="DirectoryAndFileHelper_SaveStreamToFile_DestinationFileExists" xml:space="preserve">
    <value>The destination file already exists and overrideFile is false '{0}'</value>
  </data>
  <data name="DirectoryAndFileHelper_SaveStreamToFile_ErrorCreatingTempFile" xml:space="preserve">
    <value>Error creating Or writing to temporary file used to write stream {0}</value>
  </data>
  <data name="DirectoryAndFileHelper_SaveStreamToFile_ErrorRenamingFileFromTempFile" xml:space="preserve">
    <value>Error during rename of temp file from {0} to {1}</value>
  </data>
</root>